import {
  to = segment_function.id-dfn_66045c0f1ee9284b25373bce
  id = "dfn_66045c0f1ee9284b25373bce"
}

resource "segment_function" "id-dfn_66045c0f1ee9284b25373bce" {
  code          = "// Learn more about destination functions API at\n// https://segment.com/docs/connections/destinations/destination-functions\n\n/**\n * Handle track event\n * @param  {SegmentTrackEvent} event\n * @param  {FunctionSettings} settings\n */\nasync function onTrack(event, settings) {\n\tthrow new EventNotSupported('track is not supported');\n}\n\n/**\n * Handle identify event\n * @param  {SegmentIdentifyEvent} event\n * @param  {FunctionSettings} settings\n */\nasync function onIdentify(event, settings) {\n\t// Learn more at https://segment.com/docs/connections/spec/identify/\n\tthrow new EventNotSupported('identify is not supported');\n}\n\n/**\n * Handle group event\n * @param  {SegmentGroupEvent} event\n * @param  {FunctionSettings} settings\n */\n\nasync function sleep(ms) {\n\treturn new Promise(resolve => {\n\t\tsetTimeout(resolve, ms);\n\t});\n}\n\nasync function onGroup(event, settings) {\n\t// Learn more at https://segment.com/docs/connections/spec/group/\n\tconst endpoint = 'https://rest.iad-05.braze.com/users/track'; // replace with your endpoint\n\tlet response;\n\tlet eventRequest = JSON.stringify({\n\t\tattributes: [\n\t\t\t{\n\t\t\t\texternal_id: event.userId,\n\t\t\t\t_merge_objects: true,\n\t\t\t\tcustomerAccounts: {\n\t\t\t\t\t$remove: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$identifier_key: 'GROUP_ID',\n\t\t\t\t\t\t\t$identifier_value: event.traits.GROUP_ID\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t});\n\n\ttry {\n\t\tresponse = await fetch(endpoint, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer a276c498-5689-443a-a0a5-187951ff14be`,\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: eventRequest\n\t\t});\n\t} catch (error) {\n\t\t// Retry on connection error\n\t\tthrow new RetryError(error.message);\n\t}\n\tawait sleep(3000);\n\tlet eventRequest_add = JSON.stringify({\n\t\tattributes: [\n\t\t\t{\n\t\t\t\texternal_id: event.userId,\n\t\t\t\tcustomerAccounts: {\n\t\t\t\t\t$add: [event.traits]\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t});\n\n\ttry {\n\t\tresponse = await fetch(endpoint, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer a276c498-5689-443a-a0a5-187951ff14be`,\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: eventRequest_add\n\t\t});\n\t} catch (error) {\n\t\t// Retry on connection error\n\t\tthrow new RetryError(error.message);\n\t}\n\n\tif (response.status >= 500 || response.status === 429) {\n\t\t// Retry on 5xx (server errors) and 429s (rate limits)\n\t\tthrow new RetryError(`Failed with $${response.status}`);\n\t}\n}\n\n/**\n * Handle page event\n * @param  {SegmentPageEvent} event\n * @param  {FunctionSettings} settings\n */\nasync function onPage(event, settings) {\n\t// Learn more at https://segment.com/docs/connections/spec/page/\n\tthrow new EventNotSupported('page is not supported');\n}\n\n/**\n * Handle screen event\n * @param  {SegmentScreenEvent} event\n * @param  {FunctionSettings} settings\n */\nasync function onScreen(event, settings) {\n\t// Learn more at https://segment.com/docs/connections/spec/screen/\n\tthrow new EventNotSupported('screen is not supported');\n}\n\n/**\n * Handle alias event\n * @param  {SegmentAliasEvent} event\n * @param  {FunctionSettings} settings\n */\nasync function onAlias(event, settings) {\n\t// Learn more at https://segment.com/docs/connections/spec/alias/\n\tthrow new EventNotSupported('alias is not supported');\n}\n\n/**\n * Handle delete event\n * @param  {SegmentDeleteEvent} event\n * @param  {FunctionSettings} settings\n */\nasync function onDelete(event, settings) {\n\t// Learn more at https://segment.com/docs/partners/spec/#delete\n\tthrow new EventNotSupported('delete is not supported');\n}\n"
  description   = "Send Track Events to Braze"
  display_name  = null
  logo_url      = "https://cdn-devcenter.segment.com/e2753363-f8a0-48b5-bc7c-2a4f7dd46a2e.png"
  resource_type = "DESTINATION"
  settings = [
  ]
}