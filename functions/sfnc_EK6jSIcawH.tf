import {
  to = segment_function.id-sfnc_EK6jSIcawH
  id = "sfnc_EK6jSIcawH"
}

resource "segment_function" "id-sfnc_EK6jSIcawH" {
  code          = "// Learn more about source functions API at\n// https://segment.com/docs/connections/sources/source-functions\n\n/**\n * Handle incoming HTTP request\n *\n * @param  {FunctionRequest} request\n * @param  {FunctionSettings} settings\n */\nasync function onRequest(request, settings) {\n\tconst body = request.json();\n\n\ttry {\n\t\tif (body.requestType == 'ga1') {\n\t\t\tSegment.track({\n\t\t\t\tevent: 'ga1',\n\t\t\t\tanonymousId: body.anonymousId,\n\t\t\t\tproperties: {\n\t\t\t\t\tfirstName: body.firstName,\n\t\t\t\t\tlastName: body.lastName,\n\t\t\t\t\tphone: body.phone,\n\t\t\t\t\taddress: body.address,\n\t\t\t\t\tleadId: body.leadId,\n\t\t\t\t\tmasterPersonId: body.masterPersonId\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tSegment.identify({\n\t\t\t\tanonymousId: body.anonymousId,\n\t\t\t\ttraits: {\n\t\t\t\t\tfirstName: body.firstName,\n\t\t\t\t\tlastName: body.lastName,\n\t\t\t\t\tphone: body.phone,\n\t\t\t\t\taddress: body.address,\n\t\t\t\t\tleadId: body.leadId,\n\t\t\t\t\tmasterPersonId: body.masterPersonId\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (body.requestType == 'ga2') {\n\t\t\tSegment.track({\n\t\t\t\tevent: 'ga2',\n\t\t\t\tanonymousId: body.anonymousId,\n\t\t\t\tproperties: {\n\t\t\t\t\tfirstName: body.firstName,\n\t\t\t\t\tlastName: body.lastName,\n\t\t\t\t\tphone: body.phone,\n\t\t\t\t\taddress: body.address,\n\t\t\t\t\tssn: body.ssn,\n\t\t\t\t\temail: body.email,\n\t\t\t\t\tbirthday: body.birthday,\n\t\t\t\t\tleadId: body.leadId,\n\t\t\t\t\tmasterPersonId: body.masterPersonId\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tSegment.identify({\n\t\t\t\tanonymousId: body.anonymousId,\n\t\t\t\ttraits: {\n\t\t\t\t\tpiiHash: uuidv5.uuidv5(\n\t\t\t\t\t\tuuidv5.uuidv5('null', 'postman', true),\n\t\t\t\t\t\tbody.ssn + body.birthday\n\t\t\t\t\t),\n\t\t\t\t\tfirstName: body.firstName,\n\t\t\t\t\tlastName: body.lastName,\n\t\t\t\t\tphone: body.phone,\n\t\t\t\t\taddress: body.address,\n\t\t\t\t\tssn: body.ssn,\n\t\t\t\t\temail: body.email,\n\t\t\t\t\tbirthday: body.birthday,\n\t\t\t\t\tleadId: body.leadId,\n\t\t\t\t\tmasterPersonId: body.masterPersonId\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (body.segmentCall == 'track') {\n\t\t\tSegment.track({\n\t\t\t\tevent: body.requestType,\n\t\t\t\tanonymousId: body.anonymousId,\n\t\t\t\tproperties: {\n\t\t\t\t\tfirstName: body.firstName,\n\t\t\t\t\tlastName: body.lastName,\n\t\t\t\t\tstated_phone: body.phone,\n\t\t\t\t\taddress: body.address,\n\t\t\t\t\tssn: body.ssn,\n\t\t\t\t\tstated_email: body.email,\n\t\t\t\t\tbirthday: body.birthday,\n\t\t\t\t\tleadId: body.leadId,\n\t\t\t\t\tmasterPersonId: body.masterPersonId,\n\t\t\t\t\tsegmentCall: body.segmentCall\n\t\t\t\t},\n\t\t\t\tcontext: {\n\t\t\t\t\ttraits: {\n\t\t\t\t\t\tfirstName: body.firstName,\n\t\t\t\t\t\tlastName: body.lastName,\n\t\t\t\t\t\tstated_phone: body.phone,\n\t\t\t\t\t\taddress: body.address,\n\t\t\t\t\t\tssn: body.ssn,\n\t\t\t\t\t\temail: body.email,\n\t\t\t\t\t\tbirthday: body.birthday,\n\t\t\t\t\t\tleadId: body.leadId,\n\t\t\t\t\t\tmasterPersonId: body.masterPersonId,\n\t\t\t\t\t\tsegmentCall: body.segmentCall\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (body.segmentCall == 'identify') {\n\t\t\tSegment.identify({\n\t\t\t\tuserId: body.piiHash,\n\t\t\t\tanonymousId: body.anonymousId,\n\t\t\t\ttraits: {\n\t\t\t\t\tpiiHash: body.piiHash,\n\t\t\t\t\tfirstName: body.firstName,\n\t\t\t\t\tlastName: body.lastName,\n\t\t\t\t\tstated_phone: body.phone,\n\t\t\t\t\tstated_email: body.email,\n\t\t\t\t\tssn: body.ssn,\n\t\t\t\t\tbirthday: body.birthday,\n\t\t\t\t\taddress: body.address,\n\t\t\t\t\tleadId: body.leadId,\n\t\t\t\t\tmasterPersonId: body.masterPersonId,\n\t\t\t\t\tsegmentCall: body.segmentCall\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tSegment.track({\n\t\t\t\tevent: body.requestType,\n\t\t\t\tuserId: body.piiHash,\n\t\t\t\tanonymousId: body.anonymousId\n\t\t\t});\n\t\t}\n\n\t\t// See https://segment.com/docs/connections/spec/identify/\n\n\t\t// response = await fetch(endpoint, {\n\t\t// \tmethod: 'POST',\n\t\t// \theaders: {\n\t\t// \t\tAuthorization: `Basic $${btoa(settings.apiKey + ':')}`,\n\t\t// \t\t'Content-Type': 'application/json'\n\t\t// \t},\n\t\t// \tbody: JSON.stringify(body)\n\t\t// });\n\t} catch (error) {\n\t\t// Retry on connection error\n\t\tthrow new RetryError(error.message);\n\t}\n\n\t// if (response.status >= 500 || response.status === 429) {\n\t// \t// Retry on 5xx (server errors) and 429s (rate limits)\n\t// \tthrow new RetryError(`Failed with $${response.status}`);\n\t// }\n}\n"
  description   = "Source function for receiving postman identify requests"
  display_name  = "PostmanIdentify"
  logo_url      = "https://cdn.filepicker.io/api/file/RmPmpcBTQZKaFeGQrdG5"
  resource_type = "SOURCE"
  settings = [
  ]
}