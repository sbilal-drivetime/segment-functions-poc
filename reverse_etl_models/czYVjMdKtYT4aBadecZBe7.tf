import {
  to = segment_reverse_etl_model.id-czYVjMdKtYT4aBadecZBe7
  id = "czYVjMdKtYT4aBadecZBe7"
}

resource "segment_reverse_etl_model" "id-czYVjMdKtYT4aBadecZBe7" {
  description             = "Programatically generated rETL model that is associated with an Engage rETL audience"
  enabled                 = true
  name                    = "bc-test-audience-linked-pastDue"
  query                   = "WITH ID_GRAPH AS (\n    SELECT updates.segment_id, updates.canonical_segment_id\n    FROM \"NON_PROD_SEGMENT_EVENTS\".\"DRIVETIME_DEV\".ID_GRAPH_UPDATES AS updates\n    LEFT JOIN \"NON_PROD_SEGMENT_EVENTS\".\"DRIVETIME_DEV\".ID_GRAPH_UPDATES AS updates2 ON updates2.segment_id = updates.canonical_segment_id\n        AND CAST(updates.uuid_ts AS DATETIME) < DATEADD(HOUR, 2, updates2.UUID_TS)\n        AND updates2.canonical_segment_id <> updates2.segment_id\n        AND updates2.canonical_segment_id <> updates.canonical_segment_id\n), PROFILE_TRAITS AS (\n    WITH last_profile_traits_updates AS (\n        SELECT *, ROW_NUMBER() OVER(PARTITION BY segment_id ORDER BY CASE WHEN seq IS NULL THEN '0' ELSE seq END DESC) AS last_record\n        FROM \"NON_PROD_SEGMENT_EVENTS\".\"DRIVETIME_DEV\".PROFILE_TRAITS_UPDATES AS updates\n    )\n    SELECT DISTINCT COALESCE(id_graph.canonical_segment_id,updates.segment_id) AS canonical_segment_id,\n        LAST_VALUE(updates.\"BC_TEST_AUDIENCE_GROUPS_CHARGEOFFACCOUNTS\" IGNORE NULLS)\n            OVER(PARTITION BY COALESCE(id_graph.canonical_segment_id,updates.segment_id) ORDER BY updates.seq\n                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS \"BC_TEST_AUDIENCE_GROUPS_CHARGEOFFACCOUNTS\"\n    FROM last_profile_traits_updates AS updates\n    FULL OUTER JOIN ID_GRAPH AS id_graph ON id_graph.segment_id = updates.segment_id\n    WHERE updates.last_record = 1\n), EXTERNAL_ID_MAPPING AS (\n    SELECT COALESCE(id_graph.canonical_segment_id,ids.segment_id) AS canonical_segment_id, ids.external_id_type, ids.external_id_value\n    FROM \"NON_PROD_SEGMENT_EVENTS\".\"DRIVETIME_DEV\".EXTERNAL_ID_MAPPING_UPDATES AS ids\n    LEFT JOIN ID_GRAPH AS id_graph ON id_graph.segment_id = ids.segment_id\n), ECG_1 AS (\n\tWITH filtered_query AS (\n\t\tSELECT A.\"CANONICAL_SEGMENT_ID\" AS \"A_CANONICAL_SEGMENT_ID\", B.\"ACCOUNTNUMBER\" AS \"B_ACCOUNTNUMBER\", B.\"ROUTE\" AS \"B_ROUTE\", B.\"VEHICLEYEAR\" AS \"B_VEHICLEYEAR\", B.\"VIN6\" AS \"B_VIN6\", B.\"ACCOUNTSTATUSKEY\" AS \"B_ACCOUNTSTATUSKEY\", TO_VARCHAR(CONVERT_TIMEZONE('UTC', B.\"PASTDUEDATE\"), 'YYYY-MM-DD\"T\"HH24:MI:SSTZH:TZM') AS \"B_PASTDUEDATE\", B.\"PASTDUEAMOUNT\" AS \"B_PASTDUEAMOUNT\", B.\"POOLNUMBER\" AS \"B_POOLNUMBER\", B.\"VEHICLEMAKE\" AS \"B_VEHICLEMAKE\", B.\"VEHICLEMODEL\" AS \"B_VEHICLEMODEL\", B.\"NUMBEROFDAYSPASTDUE\" AS \"B_NUMBEROFDAYSPASTDUE\"\n\t\tFROM \"NON_PROD_REPLICATED\".\"SHAREDLOANDATA\".\"REPORTING_TBLACCOUNTINFO\" B\n\t\tINNER JOIN EXTERNAL_ID_MAPPING A ON A.\"EXTERNAL_ID_TYPE\" = 'user_id' AND A.\"EXTERNAL_ID_VALUE\" = TO_VARCHAR(B.\"CUSTOMERGUID\")\n\t\tWHERE (B.\"NUMBEROFDAYSPASTDUE\" > 0)\n\t)\n\tSELECT * FROM filtered_query\n), ECG_1_SEGMENT_ID AS (\n\tSELECT \"A_CANONICAL_SEGMENT_ID\" AS \"CANONICAL_SEGMENT_ID\" FROM ECG_1 GROUP BY \"A_CANONICAL_SEGMENT_ID\"\n), PROFILE_FILTER AS (\n\tSELECT CANONICAL_SEGMENT_ID FROM PROFILE_TRAITS PT\n\tWHERE ((CANONICAL_SEGMENT_ID IN (SELECT CANONICAL_SEGMENT_ID FROM ECG_1_SEGMENT_ID)) and (PT.\"BC_TEST_AUDIENCE_GROUPS_CHARGEOFFACCOUNTS\" = ''))\n), ECG_1_FILTERED AS (\n\tSELECT * FROM ECG_1 WHERE \"A_CANONICAL_SEGMENT_ID\" IN (SELECT CANONICAL_SEGMENT_ID FROM PROFILE_FILTER)\n)\nSELECT DISTINCT * FROM (\n\tSELECT CANONICAL_SEGMENT_ID as matchId, NULL AS \"1_ROUTE\", NULL AS \"1_VEHICLEYEAR\", NULL AS \"1_VIN6\", NULL AS \"1_ACCOUNTSTATUSKEY\", NULL AS \"1_PASTDUEDATE\", NULL AS \"1_PASTDUEAMOUNT\", NULL AS \"1_POOLNUMBER\", NULL AS \"1_VEHICLEMAKE\", NULL AS \"1_VEHICLEMODEL\", NULL AS \"1_NUMBEROFDAYSPASTDUE\"\n\tFROM PROFILE_FILTER\n\tUNION ALL\n\tSELECT CONCAT_WS(':', \"A_CANONICAL_SEGMENT_ID\", '1', REPLACE(\"B_ACCOUNTNUMBER\", ':', '::')) as matchId, \"B_ROUTE\", \"B_VEHICLEYEAR\", \"B_VIN6\", \"B_ACCOUNTSTATUSKEY\", \"B_PASTDUEDATE\", \"B_PASTDUEAMOUNT\", \"B_POOLNUMBER\", \"B_VEHICLEMAKE\", \"B_VEHICLEMODEL\", \"B_NUMBEROFDAYSPASTDUE\"\n\tFROM ECG_1_FILTERED\n)"
  query_identifier_column = "matchId"
  schedule_config         = jsonencode({})
  schedule_strategy       = ""
  source_id               = "8pz8SETEasi2XtMVeBTLA7"
}